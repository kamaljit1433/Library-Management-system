#include<iostream>
#include<fstream>
#include<string.h>
using namespace std;

class Date
{
    private:
    int dd,mm,yy;
    void rectifyDate()
    {
        if (dd>30)
        {
           dd-=30;
           mm++;
        }
        if (mm > 12)
        {
            mm-=12;
            yy++;
        }
    }
    public:
    Date()
    {
        dd=1;
        mm=1;
        yy=2023;
    }
    void setData()
    {
        cout<<"Enter Date: ";
        cin>>dd;
        cout<<"Enter month: ";
        cin>>mm; 
        cout<<"Enter year: ";
        cin>>yy;
    }
    void setData(Date temp)
    {
        dd =temp.dd +15;
        mm = temp.mm;
        yy = temp.yy;
        rectifyDate();
    }
    void showDate()
    {
        cout<<dd<<"/"<<mm<<"/"<<yy;
    }
};
class Menu
{
    private:
    public:
    void mainMenu();
    void studentMenu();
    void bookMenu();
    void issueBook();
    void reutrnBook();
};
void Menu :: mainMenu()
{
    cout<<"########################## Main Menu ##########################"<<endl<<endl;
    cout<<"1. Student Menu\n2.Book Menu\n3.Issue Menu\n4. Return Book";
    cout<<"\n5. Exit"<<endl;
}
void Menu :: studentMenu()
{
    cout<<"########################## Student Menu ##########################"<<endl<<endl;
    cout<<"1. New Entry\n2. Modify Entry\n3. Search Entry\n4. Delete Entry"<<endl;
    cout<<"5. View Student Details\n6. Go back to previous Menu"<<endl;
    
}
void Menu :: bookMenu()
{
   cout<<"########################## Book Menu ##########################"<<endl<<endl;
    cout<<"1. New Entry\n2. Modify Entry\n3. Search Entry\n4. Delete Entry"<<endl;
    cout<<"5. View all books Details\n6. Go back to previous Menu"<<endl;
 
}
class BookData
{
    public:
    char title[30],author[30],publisher[30];
    int status;
    float price;
    int issuedRollNo;
    Date issueDate;
    Date returnData;
    BookData()
    {
        status = 0;
        issuedRollNo = -9999;
    }
};
class StudentData
{
    public:
    int roll_no;
    char name[30], address[30],branch[5],bookTilte[30];
    int status;
    StudentData()
    {
        status = 0;
    }
};
class Book 
{
    public:
    void inputDetails();
    void modifyDetails();
    void searchDetails();
    void deleteDetails();
    void viewAllBookDetails();
};

void Book :: inputDetails()
{
    fstream ofp;
    ofp.open("bookDatabase.dat", ios :: out | ios :: binary | ios :: app);
    if(!ofp)
    {
        cerr<<"Unable to open file"<<endl;
        return;
    }
    BookData book;
    cout<<"Enter book title: ";
    cin>>book.title;
    cout<<"enter author's name: ";
    cin>>book.author;
    cout<<"Enter book publisher: ";
    cin>>book.publisher;
    cout<<"Enter book price: ";
    cin>>book.price;

    ofp.write((char*)&book, sizeof(BookData));
    ofp.close();
}

void Book :: modifyDetails()
{
    fstream file;
    file.open("bookDatabase.dat", ios :: binary | ios :: in | ios :: out | ios :: ate);
    if(!file)
    {
        cerr<<"Unable to open file"<<endl;
        return;
    }
    file.seekg(0 , ios::beg);
    
    BookData book;
    char title[25];

    cout<<"Enter book title of the book u want to modify: ";
    cin>>title;
    while (file.read((char*)&book, sizeof(BookData)))
    {
        if(strcmp(book.title, title)==0)
        {
            int position = (-1)*sizeof(BookData);
            file.seekp(position, ios :: cur);

            cout<<"Enter new book title: ";
            cin>>book.title;
            cout<<"enter new author's name: ";
            cin>>book.author;
            cout<<"Enter new book publisher: ";
            cin>>book.publisher;
            cout<<"Enter new book price: ";
            cin>>book.price;

            cout<<"Record updated";
            cin.get();
            cin.get();
            return;
        }
    }   
    cout<<"Book not found!";
    cin.get();
    cin.get();
    return;
    }

    void Book :: searchDetails()
    {
        fstream file;
        file.open("bookDatabase.dat", ios :: in | ios :: binary);

        if(!file)
        {
            cout<<"Unable to open file!"<<endl;
            cin.get();
            cin.get();
            return;
        }
        BookData book;
        char title[30];

        cout<<"Enter book title to search: ";
        cin>>title;

        while (file.read((char*)&book, sizeof(BookData)))
        {
           if(strcmp(book.title, title) == 0)
           {
            cout<<"Book title: "<<book.title<<endl;
            cout<<"Book author: "<<book.author<<endl;
            cout<<"Book publisher: "<<book.publisher<<endl;
            cout<<"Book price: "<<book.price<<endl;
            if (book.status == 1)
            {
               cout<<"Issued status: "<<book.issuedRollNo<<endl;
               cout<<"Issued date: ";
               book.issueDate.showDate();
               cout<<endl<<"Return Date: ";
               book.returnData.showDate();
               cout<<endl;
            }
            else
            {
               cout<<"Issued status: None"<<endl;
            }
            cin.get();
            cin.get();
            return;
           }
        } 
        cout<<"Book not found"<<endl;
        cin.get();
        cin.get();
        return;       
    }

    void Book ::deleteDetails()
    {
        fstream file,temp;
        file.open("bookDatabase.dat", ios :: binary | ios :: in);
        temp.open("temp.dat", ios :: binary | ios :: out);

        char title[25];
        BookData book;
        int flag = 0;

        cout<<"Enter book title to remove: ";
        cin>>title;

        while (file.read((char*)&book, sizeof(BookData)))
     {
      if(strcmp(book.title, title)==0)
      {
        flag ++;
        continue;
      }
      temp.write((char*)&book, sizeof(BookData));
     }
     file.close();
     temp.close();
     remove("bookDatabase.dat");
     rename("temp.dat", "bookDatabase.dat");

     if (flag==1)
     {
        cout<<"Record deleted"<<endl;
     }
     else
     {
        cout<<"Record not found"<<endl;
     }
     cin.get();
     cin.get();
     return;
    }

    void Book :: viewAllBookDetails()
    {
        fstream file;
        file.open("bookDatabase.dat", ios ::binary | ios :: in);
        BookData book;
        int choice = 1;

         while (file.read((char*)&book, sizeof(BookData) && choice))
        {
         
            cout<<"Book title: "<<book.title<<endl;
            cout<<"Book author: "<<book.author<<endl;
            cout<<"Book publisher: "<<book.publisher<<endl;
            cout<<"Book price: "<<book.price<<endl;
            if (book.status == 1)
            {
               cout<<"Issued status: "<<book.issuedRollNo<<endl;
               cout<<"Issued date: ";
               book.issueDate.showDate();
               cout<<endl<<"Return Date: ";
               book.returnData.showDate();
               cout<<endl;
            }
            else
            {
               cout<<"Issued status: None"<<endl;
            }
            cout<<"Press 1 to view the next book else press 0: ";
            cin>>choice; 
            
           }
           cin.get();
            cin.get();
            return;
        } 

class Student
{
    public:
    void inputDetails();
    void modifyDetails();
    void searchDetails();
    void deleteDetails();
    void viewAllStudentDetails();
};

void Student :: inputDetails()
{
    fstream ofp;
    ofp.open("studentDatabase.dat", ios :: out | ios :: binary | ios :: app);
    if(!ofp)
    {
        cerr<<"Unable to open file"<<endl;
        return;
    }
    StudentData student;
    cout<<"Enter student's roll_no: ";
    cin>>student.roll_no;
    cout<<"enter student's name: ";
    cin>>student.name;
    cout<<"Enter student's address: ";
    cin>>student.address;
    cout<<"Enter student's branch: ";
    cin>>student.branch;

    cout<<"Record added to database";

    ofp.write((char*)&student, sizeof(StudentData));
    ofp.close();
}

void Student :: modifyDetails()
{
    
    fstream fp;
    fp.open("studentDatabase.dat", ios :: binary | ios :: in | ios :: out | ios :: ate);
    if(!fp)
    {
        cerr<<"Unable to open file"<<endl;
        return;
    }
    fp.seekg(0 , ios::beg);
    
   
    int target;
    cout<<"Enter student's roll_no to modify: ";
    cin>>target;

    StudentData student;

    while (fp.read((char*)&student, sizeof(Student)))
    {
        if(target == student.roll_no)
        {
            int position = (-1)*sizeof(StudentData);
            fp.seekp(position, ios :: cur);

           cout<<"Enter student's roll_no: ";
    cin>>student.roll_no;
    cout<<"enter student's name: ";
    cin>>student.name;
    cout<<"Enter student's address: ";
    cin>>student.address;
    cout<<"Enter student's branch: ";
    cin>>student.branch;

          fp.write((char*)&student, sizeof(StudentData));
          fp.close();

          cout<<"Record Updated";
          return;
        }
    }   
    cout<<"Roll_No not found!";
    return;
    }

void Student :: searchDetails()
{
    fstream ifp;
    ifp.open("studentDatabase.dat", ios :: in | ios :: binary);

    if(!ifp)
    {
        cerr<<"Unable to open file!"<<endl;
        return;
    }
    int target;
    cout<<"Enter roll_no to search: ";
    cin>>target;

    StudentData student;
    while (ifp.read((char*)&student, sizeof(student)))
    {
        if(target == student.roll_no)
        {
       cout<<"Record Found!"<<endl;
       cout<<"Student's name: "<<student.name<<endl;
       cout<<"Student's roll no: "<<student.roll_no<<endl;
       cout<<"Student's Branch: "<<student.branch<<endl;
       cout<<"Student's Address: "<<student.address<<endl; 

       if (student.status ==1)
       {
        cout<<"Issued book name is: "<<student.bookTilte<<endl;
       }
       else
       {
        cout<<"No book is issued for this Roll_No"<<endl;
       }
       cin.get();
       cin.get();
       return;
    }
}
cout<<"Record not found!"<<endl;
return;
}

void Student :: viewAllStudentDetails()
{
    
    fstream ifp;
    ifp.open("studenDatabase.dat", ios::in | ios :: binary);

    if(!ifp)
    {
        cerr<<"Unable to open file!"<<endl;
    }
    StudentData student;
    int choice = 1 ;
    while (ifp.read((char*)&student, sizeof(student)) && choice)
    {
       
       cout<<"Student's name: "<<student.name<<endl;
       cout<<"Student's roll no: "<<student.roll_no<<endl;
       cout<<"Student's Branch: "<<student.branch<<endl;
       cout<<"Student's Address: "<<student.address<<endl; 

       if (student.status = 1)
       {
        cout<<"Issued book name is: "<<student.bookTilte<<endl;
       }
       else
       {
        cout<<"No book is issued for this Roll_No";
       }
       cout<<"To view next student press 1 else press 0: ";
       cin>>choice;
       
    }
    return;
}

void Student :: deleteDetails()
{
fstream file;
file.open("studentDatabase.dat", ios :: in | ios :: binary);
fstream temp;
temp.open("temp.dat", ios :: out | ios:: binary);

StudentData student;
int target;
int flag = 0;

cout<<"Enter roll_no to delete data: ";
cin>>target;

while(file.read((char*)&student, sizeof(Student)))
{
    if(student.roll_no == target)
    {
        flag++;
        continue;
    }
    temp.write((char*)&student, sizeof(Student));
}
file.close();
temp.close();
remove("studentDatabase.dat");
rename("temp.dat", "studentDatabase.dat");

if(flag == 1)
{
    cout<<"Record deleted!"<<endl;
}
else
{
    cout<<"Roll_No not found!"<<endl;
}
cin.get();
cin.get();
return;
}

void Menu :: issueBook()
{
    fstream sp, bp;
    sp.open("studentDatabase.dat", ios::in | ios:: out | ios::ate |ios::binary );
    bp.open("bookDatabase.dat", ios:: in | ios:: out | ios:: ate | ios::binary);
    bp.seekg(0, ios::beg);
    sp.seekg(0, ios::beg);

    int rollNo, flagS = 0 , flagB = 0, position;
    char title[30];
    StudentData student;
    BookData book;

    cout<<"Enter Student's roll_no to issue book: ";
    cin>>rollNo;

    while(sp.read((char*)&student, sizeof(StudentData)))
    {
        if (student.roll_no == rollNo)
        {
            position = (-1)*sizeof(StudentData);
            sp.seekp(position, ios:: cur);
            flagS ++;
            break;
        }
    }
    if (flagS !=1)
    {
        cout<<"Record not found!"<<endl;
        cin.get();
        cin.get();
        sp.close();
        bp.close();
        return;
    }
    cout<<"Enter book title you want to issue: ";
    cin>>title;

    while(bp.read((char*)&book, sizeof(BookData)))
    {
        if(strcmp(book.title, title)==0)
        {
            position = (-1)*sizeof(BookData);
            bp.seekp(position, ios:: cur);
            flagB ++;
            break;
        }
    }
    if (flagB !=1)
    {
        cout<<"Record not found!"<<endl;
        cin.get();
        cin.get();
        sp.close();
        bp.close();
        return;    
    }
    if(student.status != 1 && book.status !=1)
    {
        strcpy (student.bookTilte, title);
        student.status =1;
        book.status = 1;
        book.issuedRollNo = student.roll_no;
        book.issueDate.setData();
        book.returnData.setData(book.issueDate);
        sp.write((char*)&student, sizeof(StudentData));
        bp.write((char*)&book, sizeof(BookData));
        sp.close();
        bp.close();
    }
    else
    {
     if(student.status == 1)
     {
        cout<<"Student's accoutn is already full!"<<endl;
         cin.get();
        cin.get();
        sp.close();
        bp.close();
        return;   
     }
     else
     {
        cout<<"Book is already issued!"<<endl;
         cin.get();
        cin.get();
        sp.close();
        bp.close();
        return;   
     }
    }   
}

void Menu :: reutrnBook()
{
    
      fstream sp, bp;
    sp.open("studentDatabase.dat", ios::in | ios:: out | ios::ate |ios::binary );
    bp.open("bookDatabase.dat", ios:: in | ios:: out | ios:: ate | ios::binary);
    bp.seekg(0, ios::beg);
    sp.seekg(0, ios::beg);

    int rollNo, flagS = 0 , flagB = 0, position;
    char title[30];
    StudentData student;
    BookData book;

    cout<<"Enter Student's roll_no to issue book: ";
    cin>>rollNo;

      while(sp.read((char*)&student, sizeof(StudentData)))
    {
        if (student.roll_no == rollNo)
        {
            position = (-1)*sizeof(StudentData);
            sp.seekp(position, ios:: cur);
            flagS ++;
            break;
        }
    }
    if (flagS !=1)
    {
        cout<<"Record not found!"<<endl;
        cin.get();
        cin.get();
        sp.close();
        bp.close();
        return;
    }
     while(bp.read((char*)&book, sizeof(BookData)))
    {
        if(strcmp(book.title, title)==0)
        {
            position = (-1)*sizeof(BookData);
            bp.seekp(position, ios:: cur);
            flagB ++;
            break;
        }
    }
    if (flagB !=1)
    {
        cout<<"Record not found!"<<endl;
        cin.get();
        cin.get();
        sp.close();
        bp.close();
        return;    
    }
    if (student.status = 1 && book.status ==1)
    {
        student.status =0;
        book.status = 0;
        book.issuedRollNo = -9999;
        sp.write((char*)&student, sizeof(StudentData));
        bp.write((char*)&book, sizeof(BookData));
        sp.close();
        bp.close();

    }
    else
    {
         if(student.status == 1)
     {
        cout<<"Student's accoutn is already full!"<<endl;
         cin.get();
        cin.get();
        sp.close();
        bp.close();
        return;   
     }
     else
     {
        cout<<"Book is already issued!"<<endl;
        cin.get();
        cin.get();
        sp.close();
        bp.close();
        return;   
     }
    }   
}

int main ()
{
    Menu menu;
    int quit = 0;
    char choice [3];

    while(!quit)
    {
        
        menu.mainMenu();
        cout<<"Please enter your choice: "<<endl;
        cin>>choice;

        switch(atoi(choice))

        {
            case 1: 
            {
        
        menu.studentMenu();
        cout<<"Please enter your choice: "<<endl;
        cin>>choice;
        Student s1;
        switch (atoi(choice))
        {
            case 1: s1.inputDetails();
            break;
            case 2: s1.modifyDetails();
            break;
            case 3: s1.searchDetails();
            break;
            case 4: s1.deleteDetails();
            break;
            case 5: s1.viewAllStudentDetails();
            break;
            case 6: break;

            default: cout<<"Wrong input!"<<endl;
        }
        break;
                
         }
          case 2: 
            {
       
        menu.bookMenu();
        cout<<"Please enter your choice: "<<endl;
        cin>>choice;
        Book b1;
        switch (atoi(choice))
        {
            case 1: b1.inputDetails();
            break;
            case 2: b1.modifyDetails();
            break;
            case 3: b1.searchDetails();
            break;
            case 4: b1.deleteDetails();
            break;
            case 5: b1.viewAllBookDetails();
            break;
            case 6: break;

            default: cout<<"Wrong input!"<<endl;
        }
        break;
                
         }
         case 3: menu.issueBook();
         break;
         case 4: menu.reutrnBook();
         break;
         case 5: 
         {
            cout<<"! Thanks for using it !";
            quit++;}
         break;

         default: cerr<<"Please enter correct input!"<<endl;
         cin>>choice;

        }
    }
    return 0;
}
